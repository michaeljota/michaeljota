<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>michaeljota</title>
  
  <subtitle>A world about my thoughs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://michaeljota.github.com/"/>
  <updated>2018-03-20T20:02:48.405Z</updated>
  <id>http://michaeljota.github.com/</id>
  
  <author>
    <name>Michael De Abreu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript vs Flow - Getting Started</title>
    <link href="http://michaeljota.github.com/typescript-vs-flow-getting-started/"/>
    <id>http://michaeljota.github.com/typescript-vs-flow-getting-started/</id>
    <published>2018-03-20T03:50:38.000Z</published>
    <updated>2018-03-20T20:02:48.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>I won’t hide the fact that I’m a fulltime Typescript developer, but I will try hard to give Flow a chance, because I really want a fair comparison between them. I know there has been several over the years, but this one, I’ll try to update it at least twice per year.</p><p>I first met Typescript while working in my BD final project. Then, I have strong knowledge about Java and C#, but I didn’t quite knew Javascript, so Typescript was something that interested me instantly. Anyhow, back then, I think that precompilers and build tools was just too much for me, so I did not work with it until mid 2016, when Angular came out.</p><p>And I met Flow last year, while I was working in a React project. We wanted to add static type check to the project, because it was getting big, and we weren’t scaling that well. I try both of them back then, but I really wanted to use Typescript, because it have all this new syntax, so I did not give much credit to Flow.</p><p>I remember we, as team, chose Typescript, because its integration with several IDEs. I want to think things changed, and want to give Flow a chance, a real one this time.</p><p>I try to use a scale from 1 to 10 to evaluate the two of them in several features. At the end, I will just sum all the individual scores. However, I don’t think the final score would be an indication of witch one is better <del>of curse it will, if not why I’m even giving scores?</del>.</p><hr><h2 id="What-are-they"><a href="#What-are-they" class="headerlink" title="What are they?"></a>What are they?</h2><p>Flow is a static type checker for JavaScript, and Typescript is a language that strictly super sets JavaScript with optional static typing. This is a subtle difference between them, and I hope you notice it as we get down the road.</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h5 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h5><p>To start with Flow, we will need to install a compiler to remove the type annotations of the files. This will be either Babel, configured with Flow preset, or <code>flow-remove-types</code>. I will go with the first one, as I think most of the projects now days use Babel anyway.</p><ol><li>We initialize the project, and add Babel dev dependencies, and Flow preset.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npm init -y</span></span><br><span class="line">$ ~/flow<span class="comment"># npm i -D babel-cli babel-preset-env babel-preset-flow</span></span><br></pre></td></tr></table></figure><ol><li>Configure Babel and add a script in <code>package.json</code>.</li></ol><p><code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"flow"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>package.json</code> (excerpt)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"babel src/ -d lib/"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Install and configure Flow</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npm i -D flow-bin</span></span><br></pre></td></tr></table></figure><blockquote><p>If you have a recent version of <code>npm</code> (^5.3.0) you could use <code>npx</code>, as I will. If not, you should add Flow as a script in your <code>package.json</code> and use <code>npm run ${flow script}</code> command.</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npx flow init</span></span><br><span class="line">$ ~/flow<span class="comment"># npx flow</span></span><br></pre></td></tr></table></figure><p>This will create a <code>.flowconfig</code> containing a empty configuration, that uses a custom format that may resembles <code>.INI</code> files.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[ignore]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[include]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[libs]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lints]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[options]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[strict]</span></span><br></pre></td></tr></table></figure><ol><li>Start Flow</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npx flow</span></span><br></pre></td></tr></table></figure><p>This command will start flow in watch mode in a background process and this will made the command took a long time to run. Just for a moment I though it was checking <code>node_modules</code>. When it run a second time, it will run fast.</p><blockquote><p>To stop the process use <code>npx flow stop</code>.</p></blockquote><ol><li>Write a Flow file</li></ol><p><code>src/foo.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: ?number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'default string'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>// @flow</code> comment is required to say what are the files that flow should check. Notice that even when this file is a Javascript, it not longer have a valid Javascript syntax, so it won’t run on any browser, and that’s why we need a tool to remove the types annotations.</p><blockquote><p>If you want to check all the files, regardless they have the comment or not, you have to run <code>npx flow check --all</code>. Otherwise, just with running <code>npx flow</code> will work.</p></blockquote><ol><li>Checking the code</li></ol><p>We run <code>npx flow</code> again and it will tell that there is something wrong in the code:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npx flow</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Error ------------------------------------------------------ foo.js:5:12</span><br><span class="line"></span><br><span class="line">Cannot <span class="built_in">return</span> `x` because number [1] is incompatible with string [2].</span><br><span class="line"></span><br><span class="line"> foo.js:5:12</span><br><span class="line"> 5|     <span class="built_in">return</span> x;</span><br><span class="line">               ^</span><br><span class="line"></span><br><span class="line">References:</span><br><span class="line"> foo.js:3:18</span><br><span class="line"> 3| <span class="keyword">function</span> foo(x: ?number): string &#123;</span><br><span class="line">                     ^^^^^^ [1]</span><br><span class="line"> foo.js:3:27</span><br><span class="line"> 3| <span class="keyword">function</span> foo(x: ?number): string &#123;</span><br><span class="line">                              ^^^^^^ [2]</span><br><span class="line"></span><br><span class="line">Found 1 error</span><br></pre></td></tr></table></figure><ol><li>Compiling the code</li></ol><p>In this guide I will use Babel but like I said earlier, you can also use the <code>flow-remove-types</code> tool.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npm run build</span></span><br></pre></td></tr></table></figure><p>Output: <code>lib/foo.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'default string'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, Babel emits the code even when it have a type error.</p><h5 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h5><p>To use Typescript you don’t need to setup anything else, as Typescript includes its own emitter. However, you can setup Typescript with Babel 7, if you like, but I won’t do it as the common use case is Typescript on its own.</p><ol><li>Initialize the project and add Typescript as a dev dependency.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npm init -y</span></span><br><span class="line">$ ~/flow<span class="comment"># npm i -D typescript</span></span><br></pre></td></tr></table></figure><blockquote><p>For this guide purposes I will install <code>Typescript 2.8</code>, that currently is in <code>RC</code>.</p></blockquote><ol><li>Configure Typescript</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npx tsc --init</span></span><br></pre></td></tr></table></figure><p>This will create a Typescript configuration file. It’s a JSON standard file, with well JSON Schema support.</p><p><code>tsconfig.json</code> (excerpt)<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>tsconfig.json</code> file will contain almost all compiler options, with most of them being commented out.</p><ol><li>Start Typescript</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npx tsc</span></span><br></pre></td></tr></table></figure><p>This command will check and compile all of the Typescript files, and place a compiled Javascript file aside of it. We can change this behavior in the configuration, setting a source folder, a destination folder, and even prevent emitting if there was a type error.</p><blockquote><p>To start Typescript in watch mode, just add <code>-w</code> flag.</p></blockquote><ol><li>Updating Typescript configuration</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./lib"</span>,</span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"./src"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"dom"</span>, <span class="string">"es2018"</span>],</span><br><span class="line">    <span class="attr">"noEmitOnError"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this configuration we will have a behavior similar that we had with Babel, but if there is any errors in typing, it won’t emit.</p><ol><li>Write a Typescript File</li></ol><p><code>src/foo.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x?: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'default string'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Any valid Javascript code is valid Typescript code, but in order to be consider Typescript code, you need to place it in a Typescript file, with a <code>.ts</code> extension. This fells like the comment in Flow, by default, Typescript compiler will only check Typescript files.</p><ol><li>Checking and compiling your code</li></ol><p>Typescript have its own compiler, and it handle both, type checking, and code compilation. We run <code>npx tsc</code> again and it tells us there is something wrong with our code.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/flow<span class="comment"># npx tsc</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/foo.ts(3,5): error TS2322: Type <span class="string">'number'</span> is not assignable to <span class="built_in">type</span> <span class="string">'string'</span>.</span><br></pre></td></tr></table></figure><p>If you look, there is no <code>lib</code> folder, as it did not complete the emit. The description is shorter, but the message is very similar.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>I just show you how to setup the tools to a simple usage, but in a real project you probably would end using some code bundler like Webpack or Rollup. </p><p>In the setting up and getting I will give both of them the same score, 8. While I fell that Typescript is easier to setup, because you need to setup Babel too if you want to use Flow, you probably have Babel already installed and configured anyway.</p><p>I won’t give anything yet for the code analyze, because the code was just too simple.</p><p>I will however, give 9 points to Typescript in the compilation, as I fell the prevention of emit some good feature, but I have to say I did like the Flow message better, that’s why I will give it an 8. </p><h1 id="Current-Score"><a href="#Current-Score" class="headerlink" title="Current Score"></a>Current Score</h1><table><thead><tr><th>Feature</th><th style="text-align:center">Typescript</th><th style="text-align:center">Flow</th></tr></thead><tbody><tr><td>Setting up</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr><tr><td>Compilation</td><td style="text-align:center">9</td><td style="text-align:center">8</td></tr><tr><td>Total</td><td style="text-align:center">17</td><td style="text-align:center">16</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      A comparison between TypeScript and Flow, in both type checking, and language features.
    
    </summary>
    
    
      <category term="javascript" scheme="http://michaeljota.github.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://michaeljota.github.com/tags/typescript/"/>
    
      <category term="flow" scheme="http://michaeljota.github.com/tags/flow/"/>
    
  </entry>
  
  <entry>
    <title>Organizing Your Ngrx Components Using Ducks</title>
    <link href="http://michaeljota.github.com/organizing-your-ngrx-components-using-ducks/"/>
    <id>http://michaeljota.github.com/organizing-your-ngrx-components-using-ducks/</id>
    <published>2018-03-07T22:04:34.000Z</published>
    <updated>2018-03-07T22:51:11.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Organizing-your-ngrx-components-using-ducks"><a href="#Organizing-your-ngrx-components-using-ducks" class="headerlink" title="Organizing your ngrx components using ducks"></a>Organizing your ngrx components using ducks</h1><p>I started to use ngrx recently, again, but I couldn’t find a way to organize the code following the team recommendations. I noticed that most of the style guide was using a folder-by-type structure, popular amount React projects but discouraged by the Angular Style Guide, that strongly suggests the use of a folder-by-feature structure. They even divide the features of the application in core, shared, and other features, where most of the time, core module should be importing all the core components and services of the application and be loaded by the main module, shared module should use a barrel module for all the shared components and should be imported by the features modules, and they recommend to all others feature modules to be lazy loaded.</p><p>The community seems to have a strong opinion of when to use each structure, but most of the time, folder-by-feature is recommended, because it allows to scale easier than folder-by-type.</p><p>When I worked with Angular and ngrx, I used folder-by-type, and the projects I have worked with React, our team used folder-by-type, and we tried to implement the <a href="https://github.com/erikras/ducks-modular-redux" target="_blank" rel="noopener">ducks</a> proposal often. There is a extension of that proposal to be used in a folder-by-fracture structure, named <a href="https://github.com/alexnm/re-ducks" target="_blank" rel="noopener">re-ducks</a>. So, based off the re-ducks proposal, and using the Angular Style Guide, I develop a Tour of Hero app.</p><p>I documented the result in <a href="github.com/michaeljota/ngrx-ducks">ngrx-ducks</a> repository, and I will try to explain it here.</p><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>In <code>@ngrx</code> the store have to be configured as a module, using a similar approach that Route Module have. So I took most of the recommendations about the routes in the ASG and applied to the Store in the project. </p><h3 id="Ducks"><a href="#Ducks" class="headerlink" title="Ducks"></a>Ducks</h3><p>Reducers, Actions, Effects, and Selectors, are called ducks in the proposal with the same name. In that proposal, it assumes that you are using a folder-by-type structure, and suggest to use a ducks file exporting all your ducks. In the re-ducks proposal however, it assumes that you are using a folder-by-feature structure, and suggest to separate each part of the ducks in its own file, and reexport them in a index file, inside a ducks folder.</p><p>In this proposal however, I assume that most of your reducers will be related with one component. Assuming that one reducer will handle the state of one component, allow you to put your ducks along with this.</p><p>To assume this, I also assume that you are using a folder-by-feature structure, and your are declaring a module for every of your features. This module should have its own store, and should import the state of the reducers and initialize the state of that feature. Also, it should export a feature selector, to be used by the each of that feature components selectors.</p><h1 id="A-word-about-this"><a href="#A-word-about-this" class="headerlink" title="A word about this"></a>A word about this</h1><p>Obviously, this is not an approach for everybody. If you fell like you can use the current style guide from <code>@ngrx</code>, that’s totally ok. I just need and alternative to use in larger projects. If you have a suggestion or anything, please, leave it in the comments, or better yet, open an issue in the repo.</p><p>The complete proposal is quite large to be included here, but you can read it in <a href="github.com/michaeljota/ngrx-ducks">ngrx-ducks</a>. </p><p>I know I did this thinking about me, but I really hope this can help someone else. </p><p>Thanks you so much for reading this, and I will really appreciate your thoughts about this. I don’t fell like having so much experience in large projects, but I do fell like thinking in horizontal scaling is a good approach to do so.  </p>]]></content>
    
    <summary type="html">
    
      A organization proposal for ngrx components using ducks files
    
    </summary>
    
    
      <category term="typescript" scheme="http://michaeljota.github.com/tags/typescript/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
      <category term="ngrx" scheme="http://michaeljota.github.com/tags/ngrx/"/>
    
      <category term="redux" scheme="http://michaeljota.github.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>Ngrx-Ducks: A Proposal for the Ducks Bundles in Angular With @Ngrx</title>
    <link href="http://michaeljota.github.com/ngrx-ducks-a-proposal-for-the-ducks-bundles-in-angular/"/>
    <id>http://michaeljota.github.com/ngrx-ducks-a-proposal-for-the-ducks-bundles-in-angular/</id>
    <published>2018-03-05T23:23:54.000Z</published>
    <updated>2018-03-07T22:03:18.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ngrx-ducks-A-proposal-for-the-ducks-bundles-in-Angular-with-ngrx"><a href="#ngrx-ducks-A-proposal-for-the-ducks-bundles-in-Angular-with-ngrx" class="headerlink" title="ngrx-ducks: A proposal for the ducks bundles in Angular with @ngrx"></a>ngrx-ducks: A proposal for the ducks bundles in Angular with @ngrx</h1><p>This document is based on the original <a href="https://github.com/erikras/ducks-modular-redux" target="_blank" rel="noopener">ducks</a> proposal, and the <a href="https://github.com/alexnm/re-ducks" target="_blank" rel="noopener">re-ducks</a> extension, and was made thinking first about Angular, and the current Angular Style Guide, as such I will try to use the same vocabulary with the same meaning.</p><hr><h2 id="What-is-a-duck"><a href="#What-is-a-duck" class="headerlink" title="What is a duck?"></a>What is a duck?</h2><p>A duck is a module proposal to bundle redux related code, reducer, actions, and actions types. The original proposal follow this simple rules:</p><ul><li>MUST export default a function called reducer().</li><li>MUST export its action creators as functions.</li><li>MUST have action types in the form. <code>npm-module-or-app/reducer/ACTION_TYPE</code></li><li>MAY export its action types as <code>UPPER_SNAKE_CASE</code>, if an external reducer needs to listen for them, or if it is a published reusable library.</li></ul><p>Re-ducks extension is a proposal to work with a feature folder structure. Instead of using a file, you may use a folder, with an index file as a barrel for the duck, but exporting nearly the same.</p><p>However, some of these rules are not usable in Angular, and others can be improved to take full advantage of the Typescript and Angular.</p><ul><li><code>default</code> exports doesn’t work with AOT.</li><li><code>function</code> creators does not allow to use Typescript type discrimination. You could create and return an interface to use this, but Angular Style Guide discourage the use of interfaces.</li><li>Action Types can be expressed as Typescript strings <code>enums</code>.</li><li><code>UPPER_SNAKE_CASE</code> is discourage by Angular Style Guide.</li></ul><hr><h2 id="Style-Guide"><a href="#Style-Guide" class="headerlink" title="Style Guide"></a>Style Guide</h2><p>As I said, I will use Angular Style Guide as the main document. I will use additional vocabulary.</p><ul><li><em>Extension</em> Notes that extend the rule adapting it to use with <code>ngrx</code>.</li></ul><h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><h3 id="Separate-file-names-with-dots-and-dashes"><a href="#Separate-file-names-with-dots-and-dashes" class="headerlink" title="Separate file names with dots and dashes"></a>Separate file names with dots and dashes</h3><h5 id="Extension-Style-02-02"><a href="#Extension-Style-02-02" class="headerlink" title="Extension: Style 02-02"></a>Extension: <a href="https://angular.io/guide/styleguide#style-02-02" target="_blank" rel="noopener">Style 02-02</a></h5><p><em>Consider</em> use conventional type names for store related code, including <code>actions</code>, <code>effects</code>, <code>reducer</code>, <code>selectors</code> and <code>dispatcher</code>.</p><p><em>Why?</em> Those type names represents a duck.</p><h3 id="Service-names"><a href="#Service-names" class="headerlink" title="Service names"></a>Service names</h3><h5 id="Extension-Style-02-04"><a href="#Extension-Style-02-04" class="headerlink" title="Extension: Style 02-04"></a>Extension: <a href="https://angular.io/guide/styleguide#style-02-04" target="_blank" rel="noopener">Style 02-04</a></h5><p><em>Avoid</em> naming files for store related services with the <code>.service</code> suffix.</p><p><em>Why?</em> Consistency with the duck naming, and the Style 02-02 [<em>extension</em>]</p><h3 id="Angular-NgModule-names"><a href="#Angular-NgModule-names" class="headerlink" title="Angular NgModule names"></a>Angular <em>NgModule</em> names</h3><h5 id="Extension-Style-02-12"><a href="#Extension-Style-02-12" class="headerlink" title="Extension: Style 02-12"></a>Extension: <a href="https://angular.io/guide/styleguide#style-02-12" target="_blank" rel="noopener">Style 02-12</a></h5><p><em>Do</em> suffix the name a Store module with <code>StoreModule</code>.</p><p><em>Do</em> end the file name of a Store module with <code>-store.module</code>. </p><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><h5 id="Extension-Style-03-03"><a href="#Extension-Style-03-03" class="headerlink" title="Extension Style 03-03"></a>Extension <a href="https://angular.io/guide/styleguide#style-03-03" target="_blank" rel="noopener">Style 03-03</a></h5><p><em>Avoid</em> declaring the states of the store and reducers as an interface.</p><p><em>Consider</em> declaring the state of the store and reducers as a class.</p><p><em>Consider</em> using the class properties to initialize the states.</p><p><em>Do</em> initialize the state creating a new instance of the class inside a new object using spread operator.</p><p><em>Why?</em> Using spread operator ensures that you are initializing the state as a POJO.</p><p><em>Why?</em> Angular Compiler needs to statically analyze the code.</p><p><em>Why?</em> You make sure you initiate all the state properties.</p><p><em>Why?</em> Reduce the boilerplate code.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> AppState &#123;</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialState: AppState = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState &#123;</span><br><span class="line">  count: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line"><span class="comment">/* feature/component/component.reducer.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ComponentState &#123;</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialComponentState: ComponentState = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* feature/feature-store.module.ts */</span></span><br><span class="line">. . .</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ComponentState,</span><br><span class="line">  initialComponentState,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./component/component.reducer'</span>;</span><br><span class="line">. . .</span><br><span class="line"><span class="keyword">interface</span> FeatureState &#123;</span><br><span class="line">  . . .</span><br><span class="line">  component: ComponentState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialFeatureState: FeatureState = &#123;</span><br><span class="line">  . . .</span><br><span class="line">  component: initialComponentState,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* feature/component/component.reducer.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ComponentState &#123;</span><br><span class="line">  counter: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* feature/feature-store.module.ts */</span></span><br><span class="line">. . .</span><br><span class="line"><span class="keyword">import</span> &#123; ComponentState &#125; <span class="keyword">from</span> <span class="string">'./component/component.reducer'</span>;</span><br><span class="line">. . .</span><br><span class="line"><span class="keyword">class</span> FeatureState &#123;</span><br><span class="line">  component = <span class="keyword">new</span> ComponentState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do</span></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    StoreModule.forRoot(reducers, &#123;</span><br><span class="line">      metaReducers,</span><br><span class="line">      initialState: &#123; ...new AppState() &#125;, <span class="comment">// A new instance inside of a spread operator.</span></span><br><span class="line">    &#125;),</span><br><span class="line">    StoreDevtoolsModule.instrument(),</span><br><span class="line">    EffectsModule.forRoot([]),</span><br><span class="line">  ],</span><br><span class="line">  declarations: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppStoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Overall-structural-guidelines"><a href="#Overall-structural-guidelines" class="headerlink" title="Overall structural guidelines"></a>Overall structural guidelines</h3><h5 id="Extension-Style-04-06"><a href="#Extension-Style-04-06" class="headerlink" title="Extension Style 04-06"></a>Extension <a href="https://angular.io/guide/styleguide#style-04-06" target="_blank" rel="noopener">Style 04-06</a></h5><p><em>Consider</em> putting the duck files in the component folder.</p><p><em>Why?</em> Duck files most of the times are used by a single component.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~ Avoid ~</span><br><span class="line">feature</span><br><span class="line"> |- feature.module.ts</span><br><span class="line"> |- component</span><br><span class="line"> |  |- component.component.ts|html|css|spec.ts</span><br><span class="line"> |- reducers</span><br><span class="line">    |- component.reducer|actions|effects|selectors.ts</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~ Consider ~</span><br><span class="line">feature</span><br><span class="line"> |- feature.module.ts</span><br><span class="line"> |- component</span><br><span class="line"> |  |- component.component.ts|html|css|spec.ts</span><br><span class="line">    |- component.reducer|actions|effects|selectors.ts</span><br></pre></td></tr></table></figure><h3 id="Feature-modules"><a href="#Feature-modules" class="headerlink" title="Feature modules"></a>Feature modules</h3><h5 id="Extension-Style-04-09"><a href="#Extension-Style-04-09" class="headerlink" title="Extension Style 04-09"></a>Extension <a href="https://angular.io/guide/styleguide#style-04-09" target="_blank" rel="noopener">Style 04-09</a></h5><p><em>Consider</em> creating a feature store module.</p><p><em>No additional whys besides the rules have</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line"><span class="comment">/* feature/feature.reducer.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> FeatureState &#123;</span><br><span class="line">  component = <span class="keyword">new</span> ComponentState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">featureReducer</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* app.module.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ActionReducerMap, MetaReducer, StoreModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EffectsModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/effects'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StoreDevtoolsModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store-devtools'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FeatureState, featureReducer &#125; <span class="keyword">from</span> <span class="string">'./feature/feature.reducer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState &#123;</span><br><span class="line">  feature = <span class="keyword">new</span> FeatureState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducers: ActionReducerMap&lt;AppState&gt; = &#123;</span><br><span class="line">  feature: featureReducer,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> metaReducers: MetaReducer&lt;AppState&gt;[] = [];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    StoreModule.forRoot(reducers, &#123;</span><br><span class="line">      metaReducers,</span><br><span class="line">      initialState: &#123; ...new AppState() &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    StoreDevtoolsModule.instrument(),</span><br><span class="line">    EffectsModule.forRoot([]),</span><br><span class="line">  ],</span><br><span class="line">  declarations: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppStoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* feature/feature-store.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ActionReducerMap,</span><br><span class="line">  createFeatureSelector,</span><br><span class="line">  MetaReducer,</span><br><span class="line">  StoreModule,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EffectsModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/effects'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ComponentState,</span><br><span class="line">  componentReducer,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./component/component.reducer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ComponentEffects &#125; <span class="keyword">from</span> <span class="string">'./component/component.effects'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> FeatureState &#123;</span><br><span class="line">  component = <span class="keyword">new</span> ComponentState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> featureReducers: ActionReducerMap&lt;FeatureState&gt; = &#123;</span><br><span class="line">  component: componentReducer,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> heroesState = createFeatureSelector&lt;FeatureState&gt;(<span class="string">'feature'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> metaReducers: MetaReducer&lt;FeatureState&gt;[] = [];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    StoreModule.forFeature(<span class="string">'feature'</span>, featureReducers, &#123;</span><br><span class="line">      metaReducers,</span><br><span class="line">      initialState: &#123; ...new FeatureState() &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    EffectsModule.forFeature([ComponentEffects]),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroesStoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Shared-feature-module"><a href="#Shared-feature-module" class="headerlink" title="Shared feature module"></a>Shared feature module</h3><h5 id="Extension-Style-04-10"><a href="#Extension-Style-04-10" class="headerlink" title="Extension Style 04-10"></a>Extension <a href="https://angular.io/guide/styleguide#style-04-10" target="_blank" rel="noopener">Style 04-10</a></h5><p><em>Consider</em> putting the duck files you must use in the application wide here.</p><p><em>Why?</em> Using shared modules to shared ducks makes sense.</p><h3 id="Delegate-complex-component-logic-to-services"><a href="#Delegate-complex-component-logic-to-services" class="headerlink" title="Delegate complex component logic to services"></a>Delegate complex component logic to services</h3><h5 id="Extension-Style-05-15"><a href="#Extension-Style-05-15" class="headerlink" title="Extension Style 05-15"></a>Extension <a href="https://angular.io/guide/styleguide#style-05-15" target="_blank" rel="noopener">Style 05-15</a></h5><p><em>Consider</em> using store to manage the state of the component.</p><p><em>Why?</em> Allows you to reduce the number of the dependencies.</p><p><em>Why?</em> Components are easier to test, as the only show a given state.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Model, ComponentService &#125; <span class="keyword">from</span> <span class="string">'../shared'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./component.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Component <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  list: Model[];</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> service: Component</span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = [];</span><br><span class="line">    <span class="keyword">this</span>.service.getAll()</span><br><span class="line">      .subscribe(<span class="function"><span class="params">list</span> =&gt;</span> <span class="keyword">this</span>.list = list);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; <span class="keyword">from</span> <span class="string">'../../app-store.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Model &#125; <span class="keyword">from</span> <span class="string">'../shared'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; selectList &#125; <span class="keyword">from</span> <span class="string">'./component.selectors'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./component.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Component <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  list: Observable&lt;Model[]&gt;;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly store: Store&lt;AppState&gt;</span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.heroes = <span class="keyword">this</span>.store.select(selectHeroesList).pipe(startWith([]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Useful tips for Angular applications with <code>@ngrx</code> platform.</p><h3 id="Actions-and-Actions-Types"><a href="#Actions-and-Actions-Types" class="headerlink" title="Actions and Actions Types"></a>Actions and Actions Types</h3><h5 id="Style-NGRX-01"><a href="#Style-NGRX-01" class="headerlink" title="Style NGRX-01"></a>Style NGRX-01</h5><p><em>Consider</em> creating all the actions as classes.</p><p><em>Consider</em> using a type union of all actions classes.</p><p><em>Consider</em> using strings enums to declaring the actions types.</p><p><em>Consider</em> prefix the value of all enums keys with a unique name.</p><p><em>Consider</em> making the unique name related to the component.</p><p><em>Consider</em> exporting the actions, the type and the enum of the actions types from an action file.</p><p><em>Why?</em> Using classes for actions allow to take advantage of the discriminatory types of Typescript.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* component.actions.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Model &#125; <span class="keyword">from</span> <span class="string">'./../shared/model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> ComponentActions &#123;</span><br><span class="line">  Load = <span class="string">'[Component] Load'</span>,</span><br><span class="line">  LoadSuccess = <span class="string">'[Component] Load Success'</span>,</span><br><span class="line">  Save = <span class="string">'[Component] Save'</span>,</span><br><span class="line">  SaveSuccess = <span class="string">'[Component] Save Success'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> ComponentActionType =</span><br><span class="line">  | LoadModel</span><br><span class="line">  | LoadModelSuccess</span><br><span class="line">  | SaveModel</span><br><span class="line">  | SaveModelSuccess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoadModel <span class="keyword">implements</span> Action &#123;</span><br><span class="line">  <span class="keyword">public</span> readonly <span class="keyword">type</span> = ComponentActions.Load;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> readonly payload: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoadModelSuccess <span class="keyword">implements</span> Action &#123;</span><br><span class="line">  <span class="keyword">public</span> readonly <span class="keyword">type</span> = ComponentActions.LoadSuccess;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> readonly payload: Readonly&lt;Model&gt;</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SaveModel <span class="keyword">implements</span> Action &#123;</span><br><span class="line">  <span class="keyword">public</span> readonly <span class="keyword">type</span> = ComponentActions.Save;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> readonly payload: Readonly&lt;Model&gt;</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SaveModelSuccess <span class="keyword">implements</span> Action &#123;</span><br><span class="line">  <span class="keyword">public</span> readonly <span class="keyword">type</span> = ComponentActions.SaveSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h3><h5 id="Style-NGRX-02"><a href="#Style-NGRX-02" class="headerlink" title="Style NGRX-02"></a>Style NGRX-02</h5><p><em>Consider</em> creating a dispatcher service to dispatch actions.</p><p><em>Consider</em> use human readable names for the methods in the dispatcher.</p><p><em>Consider</em> exporting the dispatcher service from a dispatcher file.</p><p><em>Consider</em> registering the dispatcher in the feature module as a provider.</p><p><em>Why?</em> A dispatcher service allows you to take advantage of Angular Dependency Injection.</p><p><em>Why?</em> You could change your actions, without modifying your dispatcher.</p><p><em>Why?</em> Allows you to use the dispatcher in your components, and in your effects services.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* component.dispatcher.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Model &#125; <span class="keyword">from</span> <span class="string">'./../shared/model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  LoadModel,</span><br><span class="line">  LoadModelSuccess,</span><br><span class="line">  SaveModel,</span><br><span class="line">  SaveModelSuccess,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./component.actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ComponentDispatcher &#123;</span><br><span class="line">  <span class="keyword">public</span> load(id: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadModel(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> loadSuccess(data: Model) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadModelSuccess(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> save(data: Model) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SaveModel(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> saveSuccess() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SaveModelSuccess();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h3><h5 id="Style-NGRX-03"><a href="#Style-NGRX-03" class="headerlink" title="Style NGRX-03"></a>Style NGRX-03</h5><p><em>Consider</em> using effects to integrate the results of all asynchronous operations with the state of the application.</p><p><em>Avoid</em> importing directly the effects into the application.</p><p><em>Why?</em> Using effects allows you practice the separation of concerns.</p><p><em>Why?</em> Effects does not need to be imported into the application. Only into the Effects Module configuration.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* component.effects.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Actions, Effect, ofType &#125; <span class="keyword">from</span> <span class="string">'@ngrx/effects'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map, switchMap &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ComponentService &#125; <span class="keyword">from</span> <span class="string">'./../shared/component.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ComponentActions,</span><br><span class="line">  ComponentActionType,</span><br><span class="line">  LoadModel,</span><br><span class="line">  SaveModel,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./component.actions'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ComponentDispatcher &#125; <span class="keyword">from</span> <span class="string">'./component.dispatcher'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ComponentEffects &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly actions: Actions&lt;ComponentActionType&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly service: ComponentService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly dispatcher: ComponentDispatcher,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Effect</span>()</span><br><span class="line">  <span class="keyword">public</span> readonly getModel = <span class="keyword">this</span>.actions.pipe(</span><br><span class="line">    ofType(ComponentActions.Load),</span><br><span class="line">    switchMap(<span class="function">(<span class="params">action: LoadModel</span>) =&gt;</span> <span class="keyword">this</span>.service.get(action.payload)),</span><br><span class="line">    map(<span class="function"><span class="params">model</span> =&gt;</span> <span class="keyword">this</span>.dispatcher.loadSuccess(model)),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Effect</span>(&#123; dispatch: <span class="literal">false</span> &#125;)</span><br><span class="line">  <span class="keyword">public</span> readonly saveModel = <span class="keyword">this</span>.actions.pipe(</span><br><span class="line">    ofType(ComponentActions.Save),</span><br><span class="line">    switchMap(<span class="function">(<span class="params">action: SaveModel</span>) =&gt;</span></span><br><span class="line">      <span class="keyword">this</span>.service.update(action.payload.id, action.payload),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h3><h5 id="Style-NGRX-04"><a href="#Style-NGRX-04" class="headerlink" title="Style NGRX-04"></a>Style NGRX-04</h5><p><em>Consider</em> placing a module reducer inside the store configuration.</p><p><em>Consider</em> using a component reducer aside the component that will use it.</p><p><em>Consider</em> declaring the initial state of the reducer as classes.</p><p><em>Consider</em> Initialize the state of the module reducer with properties calling a new instance of the component reducer states.</p><p><em>Why?</em> Module reducers should only import the components reducers and initialize them.</p><p><em>Why?</em> Classes allows to initialize the state of the reducer in a cleaner way.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* component.reducer.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; ActionReducer &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Model &#125; <span class="keyword">from</span> <span class="string">'./../shared/model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ComponentType, ComponentActions &#125; <span class="keyword">from</span> <span class="string">'./component.actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ComponentState &#123;</span><br><span class="line">  <span class="keyword">public</span> readonly model: Readonly&lt;Model&gt; = <span class="keyword">new</span> Model();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @type &#123;ActionReducer&lt;ComponentState,ComponentType&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">componentReducer</span>(<span class="params"></span></span></span><br><span class="line">  state: ComponentState = new ComponentState(),</span><br><span class="line">  action: ComponentType,</span><br><span class="line">): ComponentState &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ComponentActions.LoadSuccess:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        model: action.payload,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h3><h5 id="Style-NGRX-05"><a href="#Style-NGRX-05" class="headerlink" title="Style NGRX-05"></a>Style NGRX-05</h5><p><em>Consider</em> exporting a feature selector in the store configuration.</p><p><em>Consider</em> using selectors to take the property you need.</p><p><em>Why?</em> Selectors are a type safe approach to return an observable property of the state.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* component.selectors.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; featureState &#125; <span class="keyword">from</span> <span class="string">'./../feature.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectComponent = createSelector(</span><br><span class="line">  featureState,</span><br><span class="line">  state =&gt; state.details,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectHero = createSelector(</span><br><span class="line">  selectComponent,</span><br><span class="line">  state =&gt; state.hero,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Stores"><a href="#Stores" class="headerlink" title="Stores"></a>Stores</h3><h5 id="Style-NGRX-06"><a href="#Style-NGRX-06" class="headerlink" title="Style NGRX-06"></a>Style NGRX-06</h5><p><em>Consider</em> use an Angular barrel module to setup the Store. </p><p><em>Consider</em> setup and export the state from the module.</p><p><em>Why?</em> Barrel modules are a common practice in Angular, and a recommended way to keep your modules cleaner.</p><p><em>Why?</em> Your initial state and the store reducers will be easy to find after scaling. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line"><span class="comment">/* counter.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESET = <span class="string">'RESET'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">counterReducer</span>(<span class="params">state: <span class="built_in">number</span> = 0, action: Action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> INCREMENT:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DECREMENT:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> RESET:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* app.module.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; StoreModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; counterReducer &#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    StoreModule.forRoot(&#123; count: counterReducer &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consider</span></span><br><span class="line"><span class="comment">/* app-store.module.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ActionReducerMap, MetaReducer, StoreModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EffectsModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/effects'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StoreDevtoolsModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store-devtools'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducers: ActionReducerMap&lt;AppState&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> metaReducers: MetaReducer&lt;AppState&gt;[] = [];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    StoreModule.forRoot(reducers, &#123;</span><br><span class="line">      metaReducers,</span><br><span class="line">      initialState: &#123; ...new AppState() &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    StoreDevtoolsModule.instrument(),</span><br><span class="line">    EffectsModule.forRoot([]),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppStoreModule &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* app.module.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppStoreModule &#125; <span class="keyword">from</span> <span class="string">'./app-store.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppStoreModule,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><hr><p>Notes: </p><ul><li>The current amount of files is up-to the recommended by the Angular Style Guide.</li><li>There is not test files for the ducks.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ngrx-ducks-A-proposal-for-the-ducks-bundles-in-Angular-with-ngrx&quot;&gt;&lt;a href=&quot;#ngrx-ducks-A-proposal-for-the-ducks-bundles-in-Angular-w
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Why You Should Consider Using Classes to Declare the State of @Ngrx/store</title>
    <link href="http://michaeljota.github.com/why-you-should-consider-use-classes-to-declarate-the-state-of-the-store/"/>
    <id>http://michaeljota.github.com/why-you-should-consider-use-classes-to-declarate-the-state-of-the-store/</id>
    <published>2018-03-03T15:36:53.000Z</published>
    <updated>2018-03-03T15:44:43.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This week I’ve been playing around (again) with <code>@ngrx</code>, its store, effects, and go on, trying to integrating to a version of Tour of Heroes. It’s been more than a year since the last time I play with it, and I have to say, I’m becoming a more productive developer, and this has also evolve to become a better platform. The fact that observables now use piped operators, makes everything easier to understand.</p><p>I been watching some tutorials, and been reading a lot about the changes introduced with recent versions of the store, and I don’t know. I change the application state in two days. You may think that is a lot of time, but I didn’t know how to use effects, and also I wanted to follow the Angular Style Guide on this one, and the example app of <code>@ngrx</code> does not follow it, and most of the redux examples are made, well, for a React project.</p><p>I had my thoughts about the structure of an Angular application, but they were heavily influenced by the structure of React applications. The current Angular Code Style have change my mind about, but this is for another post.</p><h2 id="The-recommended-way"><a href="#The-recommended-way" class="headerlink" title="The recommended way"></a>The recommended way</h2><p>What I want to talk in this post, is about the recommended way to declare a state.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> AppState &#123;</span><br><span class="line">    counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialAppState: AppState &#123;</span><br><span class="line">    counter: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Why? Ok, here is why. It IS recommended that you use a POJO for declaring the state, and the actions. But, does it really hurt to declare an immutable Typescript class to declare the State?</p><h2 id="Classy"><a href="#Classy" class="headerlink" title="Classy"></a>Classy</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState &#123;</span><br><span class="line">    <span class="keyword">public</span> readonly counter: <span class="built_in">number</span> = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When this is set in the store configuration, the state initializes as a POJO as well, so there is no side effects going around here.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StoreModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState &#123;</span><br><span class="line">    <span class="keyword">public</span> readonly counter: <span class="built_in">number</span> = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducers = <span class="function">(<span class="params">state = <span class="keyword">new</span> AppState(<span class="params"></span>), action</span>) =&gt;</span> state; <span class="comment">// Best reducer ever!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    StoreModule.forRoot(reducers, &#123;</span><br><span class="line">      initialState: <span class="keyword">new</span> AppState(),</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppStoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>I think this is clearer. You make sure that you set all the required properties, and only need to call the constructor when ever you need. And, you can use the AppState as a interface, wherever you want. </p><p>Do you think this is a good thing o a bad thing? Why? I would like to read your comments. </p>]]></content>
    
    <summary type="html">
    
      A opinion post about the use of classes in @ngrx/store
    
    </summary>
    
    
      <category term="typescript" scheme="http://michaeljota.github.com/tags/typescript/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>A Thought About the Future of Web Application Development</title>
    <link href="http://michaeljota.github.com/a-thought-about-the-future-of-web-application-development/"/>
    <id>http://michaeljota.github.com/a-thought-about-the-future-of-web-application-development/</id>
    <published>2018-02-04T15:21:32.000Z</published>
    <updated>2018-02-17T21:00:49.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This will be a personal post about how I would like to see the web development in the near future. However, I will not simple say this should like that because I like it better, but will try to reason about behind that.</p><h1 id="The-web-development-is-the-future"><a href="#The-web-development-is-the-future" class="headerlink" title="The web development is the future"></a>The web development is the future</h1><p>With the introduction of Progressive Web Apps it is clear that the web applications should in the future replace the native applications. But, not quite at all. Technologies such NativeScript, ReactNative, ReactVR and a large renderers have teach us that the web development is not just about a browser, but instead this could be renderer by any kind of technologies.</p><p>Aside of that, the JavaScript language can now be used for Server side coding, and have also several others applications, that were just simple unimaginable when the language was created, robots and IoT, just to give an example.</p><p>This leads me to believe that web technologies will allow us to develop any kind of application in any kind of platforms, current or future.</p><h1 id="The-web-development-is-the-past"><a href="#The-web-development-is-the-past" class="headerlink" title="The web development is the past"></a>The web development is the past</h1><p>However, we need to change how we develop web applications. The languages that we use everyday have evolve for decades to become what they are today. But we should never forget how that languages were create and the reason why they were create. For example, Javascript was create in only 10 days, and just because they wanted to any developer could glue up some HTML.</p><p>Web languages was not created for any of the current applications, for that reason several other technologies and languages was create to allow a better development environment for the web, such Typescript, JSX and CSS-in-JS to name a few, but top used of that new technologies.</p><p>The browser itself haven’t change much over the years. Of curse, web languages have become standardized and browsers now implements features for that standardizations, and new standards have allow us to develop with new features, but at the end, we are developing with the same languages, and the same syntax, to be interpreted in the same way. We are developing for a 25 years old system, and we have to maintain it.</p><h1 id="The-web-development-needs-to-evolve"><a href="#The-web-development-needs-to-evolve" class="headerlink" title="The web development needs to evolve"></a>The web development needs to evolve</h1><p>I think that new web technologies need to be created, standardized and replace the current ones. We need to keep all the good things that we currently have, learn from the bad things, and apply the ones that the community have embrace over all these years.</p><h2 id="Markup-language"><a href="#Markup-language" class="headerlink" title="Markup language"></a>Markup language</h2><h5 id="The-bad-about-HTML"><a href="#The-bad-about-HTML" class="headerlink" title="The bad about HTML"></a>The bad about HTML</h5><p>There is essentially nothing bad with HTML, but we need to start noticing the importance of a good write program. HTML was create to write simple elements,<br>with a predictable syntax, and I don’t think we have that anymore. With libraries such Angular, React, and Vue, and future features as Web Components, we are no longer written simple elements, and by any reason we have a predictable syntax. We need to know the properties that the elements needs, and how they will be applied.</p><h5 id="The-good-about-HTML"><a href="#The-good-about-HTML" class="headerlink" title="The good about HTML"></a>The good about HTML</h5><p>HTML is a really simple to learn, and with that we could develop a skeleton application in seconds. The syntax is simple and play nice with other templates engines, such ejs, and other languages, such PHP.</p><h5 id="What-we-could-learn"><a href="#What-we-could-learn" class="headerlink" title="What we could learn"></a>What we could learn</h5><p>We need a simple way to define custom elements and isolated templates. The way Vue define templates is really simple. I also like the way Angular consume templates, even when a template could be potentially used by many components, most of the times an Angular template is used by a single complement. Also, this new language have to be used for templates engines, and other languages without much effort, and have to be simple and effective.</p><h5 id="What-I-think-should-be"><a href="#What-I-think-should-be" class="headerlink" title="What I think should be"></a>What I think should be</h5><p>HTML as is, is a great language. However, I think that this language have to evolve, and stop being a XML extension to become a complete language on its own, one that allows to grow, but also to keep backward compatibility with older implementations of the same language. Also, needs to have some template logic operations on its own, a syntax capable of be integrated with current and future languages, and maintain isolation.</p><p>I think a QML inspired language could be really good for the web. The tree structure that QML manages, resembles HTML, but its mean to be written for complex applications and to handle custom elements. It doesn’t have to be QML as is right now. For me, this is just an idea, but I think we really need a markup syntax made for current applications. One more thing that I would like to see in this language would be typed attributes, and a simple way to define them in new components.</p><h2 id="Style-language"><a href="#Style-language" class="headerlink" title="Style language"></a>Style language</h2><h5 id="The-bad-about-CSS"><a href="#The-bad-about-CSS" class="headerlink" title="The bad about CSS"></a>The bad about CSS</h5><p>As with HTML, there is nothing really wrong about CSS, it is a simple language to learn, but is really hard to master it. Also a couple things that needs to be improved. One is the need for a way to apply isolated style in custom components, and restyle that components easily as well. And if you are thinking <em>“Shadow DOM have that”</em>, yeah, it does. But Shadow DOM is still an experiment, and the specification is being developed, with several things being dropped, and replaced. Let’s face it, adding a new feature to CSS is too slow, and even when we have it, we need to wait until majority of browsers could support it, and prefix the properties with the vendor name for properties that are not standardized. </p><p>And that leave us with the second thing to be improved. The current way to bring new features to older browsers is to polyfill them. CSS is really hard to polyfill, and effectively unviable.</p><h5 id="The-good-about-CSS"><a href="#The-good-about-CSS" class="headerlink" title="The good about CSS"></a>The good about CSS</h5><p>Like HTML, CSS is a really simple language, that can accomplish complex thing.<br>As I said, is easy to learn, and most of editors have autocomplete capability. </p><h5 id="What-we-could-learn-1"><a href="#What-we-could-learn-1" class="headerlink" title="What we could learn"></a>What we could learn</h5><p>We could learn as much as SCSS let us to learn. I formerly thought that SCSS stands for Super CSS, I know, I know. I was just beginning in web development, but can you blame me? The syntax is identical to CSS, and it allows to nest selectors, apply mixins, use variables, and many other things. SCSS have become in many case the standard way of develop web styles.</p><h5 id="What-I-think-it-should-be"><a href="#What-I-think-it-should-be" class="headerlink" title="What I think it should be"></a>What I think it should be</h5><p>The new language for apply styles in complex applications should resemble CSS, with the features that SCSS allows us to have. What I’m saying is, the features that SCSS allow us to have should be standard. Needs support for better cross file references.</p><p>I think it needs some standardizations of the currently spec, including the initial value of the rules, and a standardized unit value, that would display nice in every device, and I not talking only about web consumer devices, but other renderer engines should display the same structure identical. In deep, it needs to be able to play nicely in older implementations of that language, and a simple way to polyfill when it need.</p><h2 id="Scripting-Language"><a href="#Scripting-Language" class="headerlink" title="Scripting Language"></a>Scripting Language</h2><h5 id="The-bad-about-Javascript"><a href="#The-bad-about-Javascript" class="headerlink" title="The bad about Javascript"></a>The bad about Javascript</h5><p>Javascript is broken. It was born broken, and it have been broken ever since. Nowadays, there are more, and more new features that are being added to the spec, but we are just putting some band-aid in a broken leg. That just won’t work. Even now, when Javascript engines interpret scripts almost the same way, there are several things that are just wrong with the language, and they are in its bones, you can’t just make Javascript work as a proper language anymore.</p><p>This, I believe, and no other, are the one thing that needs to be replaced. Javascript is a language that can now run in a multitude of device, in a large amount of platforms, and it is just broken. We don’t need to keep adding new features to Javascript, we need to write and standardize a new scripting language that could be used to develop complex application.</p><h5 id="The-good-about-Javascript"><a href="#The-good-about-Javascript" class="headerlink" title="The good about Javascript"></a>The good about Javascript</h5><p>Javascript is an incredible easy programming language to learn, and it’s also powerful. Every single thing in the web right have some amount of Javascript, and now, even mobile and desktop applications run Javascript. I think that’s amazing. You don’t need a complex structure application to start a Javascript program, you just need to write a function and then called it. The simplicity is just beautiful. Adding new features on older browsers with polyfills are easy and accurate, most of the time. </p><h5 id="What-we-could-learn-2"><a href="#What-we-could-learn-2" class="headerlink" title="What we could learn"></a>What we could learn</h5><p>Projects and languages as Typescript, Flow, Props, and several others, say to us, that even when we don’t want to, we need this to be a typed language. Large enterprise level applications need a predictable way to work with, and Javascript is just not predictable at all. </p><p>New features such spread operator, decorators, template strings, and others, have show us that a language needs to evolve from what it is to what the community wants.</p><p>Even libraries should be something we need to learn from, for example Immutable. That brings something something like immutability to Javascript, and have teach us why this is should be important. There is even a proposal to bring immutable feature to current Javascript. </p><p>But, what we need the most, is to learn about the Javascript weirdness and just make a proper language. We don’t need a triple equal operator, we need a equal operator that don’t do weird things underneath. </p><h5 id="What-I-think-it-should-be-like"><a href="#What-I-think-it-should-be-like" class="headerlink" title="What I think it should be like"></a>What I think it should be like</h5><p>No surprise here, I think Typescript needs to be effectively the Javascript superset that it says to be, or at least, something like it. Sure, currently Typescript compiles to plain old Javascript, some times even making ES7 features available to ES5 browsers, but what would be better if for the browser to properly understand what Typescript code actually mean. This would allow to take advantage about the type system that Typescript have, the better is that being a super set of Javascript, every program written in Javascript is a valid Typescript program.</p><p>Well, now that we are dreaming, we could deprecate keywords such <code>var</code>, and operators like <code>===</code> in favor of the new syntax <code>let</code> and <code>const</code>, and simple <code>==</code> without any casting. I would even say that <code>const</code> should be able to store a constant object and function, in which the assignment of new values for any of its properties, recursively would be impossible. <code>class</code>es would be classes for real, and could be written as any other class in other languages. <code>interfaces</code> would be a real thing that you could check in runtime. And several others features that would result in a better language.</p><p>The language would still the same function first language, with the nice syntax, optional typing, falling back to our dear <code>any</code> type when there is not assignment or type declaration. Well, if we still have any type, there should be a type transformation when dealing with equality, right? Not exactly. Even when the type is not specify, the variable still have a type when gets evaluated, that is somewhat the current behavior with triple check equality.</p><h2 id="The-Web-apps"><a href="#The-Web-apps" class="headerlink" title="The Web apps"></a>The Web apps</h2><h5 id="The-good-about-the-Web-apps"><a href="#The-good-about-the-Web-apps" class="headerlink" title="The good about the Web apps"></a>The good about the Web apps</h5><p>The web applications are not compile for an operative system, nor they run on top of a virtual machine, they are run inside of a browser. But they can be compile for an operative system, and the could run on top of a virtual environment, and they could be used to program servers, and robots, and any kind of things now.</p><p>What is really good about the web applications, there are just developed using standards. You may notice that I use that word a lot along the post, and the reason is because Web as we know it, is just a complex series of standards, that can be implemented in anyhow, by anyone, anywhere. To do so, you just need to properly implement the current specifications about the technologies you want to use, as best as you can, and you can even decide what to do in things that are not properly describe. I think that is beauty. I think that is the future.</p><h5 id="What-I-think-it-will-be-like"><a href="#What-I-think-it-will-be-like" class="headerlink" title="What I think it will be like"></a>What I think it will be like</h5><p>Maybe not in a year, maybe not in two. But sooner than latter, native web applications will be in our lives, they will behave like any other native application that we currently have, and will perform likewise. I’m not talking about Cordova, or NativeScript, but deep integration of web applications with the operative systems.</p><p>New operative systems that will only need to implement web technologies to be usable, and new web rendereres in devices we only dream now.</p><p>Applications will be develop like back in the days, when I didn’t actually code, with a language for a feature, without bundlers, transpilers, or anything that we currently have. Because we will learn from what we have, and evolve. </p><h1 id="That’s-all-folks"><a href="#That’s-all-folks" class="headerlink" title="That’s all folks"></a>That’s all folks</h1><p>If you really read all this, thanks you. It’s a really long post, and it’s very opinionated. I would like to read in your comments, how you imagine the applications development would be in a couple years.</p>]]></content>
    
    <summary type="html">
    
      My personal thoughts about how the web development should become
    
    </summary>
    
    
      <category term="development" scheme="http://michaeljota.github.com/tags/development/"/>
    
      <category term="webcomponents" scheme="http://michaeljota.github.com/tags/webcomponents/"/>
    
      <category term="javascript" scheme="http://michaeljota.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Integration an Angular-CLI Application With Electron - the IPC</title>
    <link href="http://michaeljota.github.com/integration-an-angular-cli-application-with-electron-the-ipc/"/>
    <id>http://michaeljota.github.com/integration-an-angular-cli-application-with-electron-the-ipc/</id>
    <published>2018-01-29T16:00:00.000Z</published>
    <updated>2018-02-12T00:53:23.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Previously-on…"><a href="#Previously-on…" class="headerlink" title="Previously on…"></a>Previously on…</h1><p>In the previous sections and stories, I explained how to integrate an Angular-CLI generated application with Electron, and also how to write the same Electron application in Typescript. So far, this would allow a simple Angular application being packed as a Electron application, but there is no way for us to interact with Electron’s main thread.</p><ul><li><a href="/integrating-an-angular-cli-application-with-electron-the-seed">The seed</a></li><li><a href="/electron-with-typescript-using-ts-node">Electron with Typescript</a></li></ul><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In this post I’ll try to explain how to get a real integrating between Angular and Electron, and be able to communicate using Electron’s IPC.</p><h2 id="What-is-IPC"><a href="#What-is-IPC" class="headerlink" title="What is IPC?"></a>What is IPC?</h2><p>IPC is the inter-process communication module of Electron. With that you can send messages between your web application and the main thread application. To send and receive messages in the main thread you would have to use the <a href="https://electronjs.org/docs/api/ipc-main" target="_blank" rel="noopener">ipcMain</a> function property. Likewise, for the renderer process you would like to use the <a href="https://electronjs.org/docs/api/ipc-renderer" target="_blank" rel="noopener">ipcRenderer</a>.</p><h2 id="How-to-use-ipcMain"><a href="#How-to-use-ipcMain" class="headerlink" title="How to use ipcMain?"></a>How to use ipcMain?</h2><p>Use ipcMain is a simple as require it, and use one of the functions that are able for us.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ipcMain &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">'ping'</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    logger(<span class="string">'ping'</span>); <span class="comment">// Assume there is a logger function that would display 'ping' in console. console object does not work as-is, and it's not so easy to configure it.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>With that, the application will be listening a <code>&#39;ping&#39;</code> event, and will print <code>ping</code> in the console. Easy peasy.</p><h2 id="How-to-normally-use-ipcRenderer"><a href="#How-to-normally-use-ipcRenderer" class="headerlink" title="How to (normally) use ipcRenderer?"></a>How to (normally) use ipcRenderer?</h2><p>In a normal scenario, a simple <code>require(&#39;electron&#39;).ipcRenderer</code> would give us access to the IPC in the renderer thread. So, following the previous example, we could do something like:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line">ipcRenderer.send(<span class="string">'ping'</span>);</span><br></pre></td></tr></table></figure><p>This will invoke the callback function in the main thread. </p><p>But, this won’t work in the Angular-CLI application. Angular-CLI underneath uses Webpack, and thus the latter will find the <code>require</code> <em>key</em> word, interpret as a call for the Node.js’ <code>require</code> function, and will try to resolve the ‘electron’ module. </p><h2 id="A-Story-about-two-requires"><a href="#A-Story-about-two-requires" class="headerlink" title="A Story about two requires"></a>A Story about two <code>require</code>s</h2><p><code>require</code> as been with us for a while, since the first version of Node back in 2008, almost 10 years. But still is one of the most misunderstand functions in modern web development. With the integration of <code>import</code> and <code>export</code> keywords in Node, several articles was written to explain how the <code>require</code> function currently works. TL;DR: A <code>require</code> function is injected for every file, allowing Node to resolve the dependencies. Later, module builders will look for <code>import</code> and <code>require</code> and will try to resolve modules, assuming that’s what you want. </p><p>So, now that we know that <code>require</code> is actually a function injected by Node, then how is <code>require</code> able to work in Electron renderer process. You may guessed it, Electron injects its own version of <code>require</code> function in the global scope of the renderer process when it loads the page. So, although it may seems like the same function, it is not. </p><h2 id="How-to-use-ipcRenderer-in-a-Angular-CLI-application-Or-any-application-bundle-with-Webpack"><a href="#How-to-use-ipcRenderer-in-a-Angular-CLI-application-Or-any-application-bundle-with-Webpack" class="headerlink" title="How to use ipcRenderer in a Angular-CLI application? (Or any application bundle with Webpack)"></a>How to use ipcRenderer in a Angular-CLI application? (Or any application bundle with Webpack)</h2><p>To use <code>ipcRenderer</code> in our Angular-CLI app, we will leverage on the global scope. No, we won’t call ipcRenderer in the global context, although we could make this works, it’s not ideal. But I just told that <code>require</code> is a function that Electron injects in the global context. So, can we just use <code>require</code>? No. That’s because, as I also told, Webpack will try to resolve the module requirement. There is actually another way to access a global variable, that’s with the <code>window</code> object. The <code>window</code> object by default will have all the global variables, including <code>require</code>.</p><p>So we can just use <code>window.require</code> in any part of our application and it would work as expected. In this context, you cannot use <code>window.require</code> to require any module in your Angular-CLI application, but you can load any module that you had set in your Electron application.</p><h2 id="Writing-the-service"><a href="#Writing-the-service" class="headerlink" title="Writing the service"></a>Writing the service</h2><p>For this example we will expose the <code>ipc</code> as an Angular service, and will create it using angular-cli. We follow the guide about <a href="https://github.com/angular/angular-cli/wiki/generate-service" target="_blank" rel="noopener">services</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate service ipc -m app</span><br></pre></td></tr></table></figure><p>This will create our service, and update our <code>app.module</code> to include it in the Angular application.</p><p>Then, we write the code. We start by importing the IpcRenderer interface from electron module</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IpcRenderer &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br></pre></td></tr></table></figure><p>But, we don’t have any Electron module in our Angular project, how will it be resolved? We’ll, actually we don’t need to have the Electron module in our Angular project, because as Typescript resolver work, it will look in <code>node_modules</code> in folders that are children from ours project. If you want to be extra safe, or if for any reason this is not a desire behavior, you could install the <code>@types</code> of electron, and it won’t load the hole package.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/electron</span><br></pre></td></tr></table></figure><p>Next, we add a reference property inside the class to save the ipcRenderer function when we load it.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> _ipc: IpcRenderer | <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>It’s important to typed it as <code>IpcRenderer | undefined</code> for compile the code in strict mode, as we may or may not be able to load the ipcRenderer. We now write the constructor, to assign the <code>_ipc</code> in load time. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.require) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._ipc = <span class="built_in">window</span>.require(<span class="string">'electron'</span>).ipcRenderer;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'Electron\'s IPC was not loaded'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, we will first check if <code>window</code> object has a <code>require</code> property. With this we will assume we are inside Electron, then we will <code>try</code> to <code>require(&#39;electron&#39;)</code>, if for any reason it doesn’t work it just throw an error, and the property <code>_ipc</code> will be undefined. Checking require in the <code>window</code> object will allow us to run the service in a regular browser context, in that case the <code>_ipc</code> won’t have a assignment value and will be <code>undefined</code>.</p><p>You should have Typescript complaining about <code>window</code> not having a <code>require</code> property, so we need to update the project’s typings file. Open <code>/src/typings.d.ts</code> and update with the following lines:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Window &#123;</span><br><span class="line">  <span class="built_in">require</span>: NodeRequire;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, Typescript shouldn’t be annoying us. </p><p>I’ll add a couple of functions to the service, just to test that it actually works as expected.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> on(channel: <span class="built_in">string</span>, listener: <span class="built_in">Function</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._ipc) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._ipc.on(channel, listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> send(channel: <span class="built_in">string</span>, ...args): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._ipc) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._ipc.send(channel, ...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, in both we check for the <code>_ipc</code> property to be assigned, and then we call the functions that we want to call. We expose the same function interface of the functions we want to call, so it will be very intuitive to call them from our application. </p><p>The final service should look like:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IpcRenderer &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IpcService &#123;</span><br><span class="line">  <span class="keyword">private</span> _ipc: IpcRenderer | <span class="literal">undefined</span> = <span class="built_in">void</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.require) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._ipc = <span class="built_in">window</span>.require(<span class="string">'electron'</span>).ipcRenderer;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">'Electron\'s IPC was not loaded'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> on(channel: <span class="built_in">string</span>, listener: IpcCallback): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._ipc) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._ipc.on(channel, listener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> send(channel: <span class="built_in">string</span>, ...args): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._ipc) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._ipc.send(channel, ...args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Testing-it"><a href="#Testing-it" class="headerlink" title="Testing it"></a>Testing it</h2><p>For testing we will call an ipc channel, and make Electron to response us back, and listen that response. </p><p>First, we will update our <code>app.component</code> with the following constructor function:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly _ipc: IpcService</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>._ipc.on(<span class="string">'pong'</span>, <span class="function">(<span class="params">event: Electron.IpcMessageEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'pong'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._ipc.send(<span class="string">'ping'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>And then we will update Electron’s <code>index.ts</code> file, importing the <code>ipcMain</code> module and setting a listener for the <code>ping</code> event, that response <code>pong</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First we update the import line</span></span><br><span class="line"><span class="keyword">import</span> &#123; app, BrowserWindow, ipcMain, IpcMessageEvent &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line">...</span><br><span class="line">ipcMain.on(<span class="string">'ping'</span>, <span class="function">(<span class="params">event: IpcMessageEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  event.sender.send(<span class="string">'pong'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Run the angular app with <code>npm run electron:start</code> and in the electron application run <code>npm start</code>. You should see a pong getting logged.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/xfyeh5gf2dvz66o54qdk.png" alt="pong"></p><h1 id="Moving-forward"><a href="#Moving-forward" class="headerlink" title="Moving forward"></a>Moving forward</h1><p>There are still somethings that can be improve in the current workflow, and some of you are having troubles with native modules. But, so far we have pass for a simple Angular app, to a complete Angular/Electron integration. I’ll soon uploading all this to Github, to stay tune there as well. </p><h1 id="That’s-all-folks"><a href="#That’s-all-folks" class="headerlink" title="That’s all folks"></a>That’s all folks</h1><p>As usual, thanks you for reading this, check out my others posts. Give the post love, and share it with your friends. See you next time.</p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><ul><li><a href="/integrating-an-angular-cli-application-with-electron-the-seed">The seed</a></li><li><a href="/electron-with-typescript-using-ts-node">Electron with Typescript</a></li><li><a href="/integrating-an-angular-cli-application-with-electron-the-ipc">The IPC</a></li></ul>]]></content>
    
    <summary type="html">
    
      A story about how to integrate an angular-cli application with Electron using IPC
    
    </summary>
    
    
      <category term="electron" scheme="http://michaeljota.github.com/tags/electron/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
      <category term="node" scheme="http://michaeljota.github.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Electron With Typescript Using Ts-Node</title>
    <link href="http://michaeljota.github.com/electron-with-typescript-using-ts-node/"/>
    <id>http://michaeljota.github.com/electron-with-typescript-using-ts-node/</id>
    <published>2018-01-27T16:00:00.000Z</published>
    <updated>2018-02-01T23:39:07.417Z</updated>
    
    <content type="html"><![CDATA[<p>In my last post, I talked about how to <a href="/integrating-an-angular-cli-application-with-electron-34mi">Integrate Angular-CLI with Electron</a>. One of the things that was missing was the use of Typescript, oposite to vanilla Javascript, though Electron’s  main is a Node based engine, so almost everything about ES2015 and ES2016 should work, some newer features are still missing as current version, <code>1.7.11</code>, is based on <code>node 7.9</code>. And, types are still missing, because of JavaScript. Using Electron with Typescript, is really simple, but we would need to install some modules.</p><h2 id="Installing-dependencies"><a href="#Installing-dependencies" class="headerlink" title="Installing dependencies"></a>Installing dependencies</h2><p>We move to the Electron entry folder. In the case the you are integrating with Angular-CLI following my guide, it would be <code>electron</code> folder. Then, we run:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D typescript ts-node</span><br></pre></td></tr></table></figure><ul><li><em>typescript</em>: Well, this is actually what we want to use.</li><li><em>ts-node</em>: TypeScript execution environment and REPL for node. This will resolver all the <code>.ts</code> files on the fly. </li></ul><h2 id="Creating-tsconfig-json"><a href="#Creating-tsconfig-json" class="headerlink" title="Creating tsconfig.json"></a>Creating tsconfig.json</h2><p>Run <code>npx tsc --init</code> if you are using npm 5.2+ to create the <code>tsconfig.json</code>. As is it will work, so we will leave it. </p><h2 id="Updating-files"><a href="#Updating-files" class="headerlink" title="Updating files"></a>Updating files</h2><p>We need to modify how the application runs.</p><ul><li>Create a folder named <code>src</code>, this will be our development folder.</li><li>Move <code>index.js</code> to <code>src</code> and rename it <code>index.ts</code>. This is now a Typescript file.</li><li>Create a new <code>index.js</code> in the application root, with the following content.<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'ts-node'</span>).register(); <span class="comment">// This will register the TypeScript compiler</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./src'</span>); <span class="comment">// This will load our Typescript application</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Running-Electron"><a href="#Running-Electron" class="headerlink" title="Running Electron"></a>Running Electron</h2><p>Now it’s time to try, and run <code>npm start</code> if you are following the integration guide, or <code>electron .</code> if you don’t have the associated script.</p><p>You should see something like this:<br><img src="https://thepracticaldev.s3.amazonaws.com/i/z1g6mt642m943tunr9my.png" alt="electron-error"></p><p>This is fine. Because we are using <code>__dirname</code> as our folder root, now Electron can’t find the app source. </p><h2 id="Updating-index-ts"><a href="#Updating-index-ts" class="headerlink" title="Updating index.ts"></a>Updating <code>index.ts</code></h2><p>Hopefully, the solution is really simple. Just change <code>__dirname</code> in the <code>path.join</code> function with <code>app.getAppPath()</code>. </p><p><em>What getAppPath() is?</em> <a href="https://electronjs.org/docs/api/app#appgetapppath" target="_blank" rel="noopener">Docs</a><br>This is a Electron function that will resolve to the root of the application path. </p><h2 id="Running-Electron-again"><a href="#Running-Electron-again" class="headerlink" title="Running Electron (again)"></a>Running Electron (again)</h2><p>If everything went fine, you should now see your application running inside Electron.</p><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>This is just a guide to show how this <em>work</em>. However, I don’t recommend use <code>ts-node</code> as a production solution. Also, I have not test the <code>getAppPath</code> function in a bundle application, so it may fail. </p><h1 id="Moving-forward"><a href="#Moving-forward" class="headerlink" title="Moving forward"></a>Moving forward</h1><p>We have now a Electron application written in Typescript. It could optimize for production by using a build system, such Webpack. Also, we could target <code>es6</code> in the <code>tsconfig</code> file as Electron main will work fine with es2015. </p><p>Uses of native modules are something that seems to have interest of users, so I’ll probably made a guide about using them.</p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><ul><li><a href="/integrating-an-angular-cli-application-with-electron-34mi">The seed</a></li><li><a href="/electron-with-typescript-using-ts-node-8oi">Electron with Typescript</a></li><li><a href="/integrating-an-angular-cli-application-with-electron---the-ipc-4m18">The IPC</a></li></ul>]]></content>
    
    <summary type="html">
    
      A post about using Electron with Typescript using ts-node
    
    </summary>
    
    
      <category term="typescript" scheme="http://michaeljota.github.com/tags/typescript/"/>
    
      <category term="electron" scheme="http://michaeljota.github.com/tags/electron/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Integration an Angular-CLI Application With Electron - the Seed</title>
    <link href="http://michaeljota.github.com/integration-an-angular-cli-application-with-electron-the-seed/"/>
    <id>http://michaeljota.github.com/integration-an-angular-cli-application-with-electron-the-seed/</id>
    <published>2018-01-08T16:00:00.000Z</published>
    <updated>2018-02-01T23:39:07.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Integrate-your-project-with-Electron"><a href="#Integrate-your-project-with-Electron" class="headerlink" title="Integrate your project with Electron"></a>Integrate your project with Electron</h1><p>Electron is a platform to develop desktop applications using web technologies like HTML, CSS and JS. Integrate a ng-cli application with Electron is more straightforward that it may seems.</p><h2 id="Electron’s-two-package-structure"><a href="#Electron’s-two-package-structure" class="headerlink" title="Electron’s two package structure"></a>Electron’s two package structure</h2><p>If you are familiarized with Electron you may remember the two package structure. We will use a similar structure, but with a key difference: In a regular two package structure, the <code>/app/</code> folder will contains the Electron app. We will name this folder <code>/electron/</code> and another <code>/app/</code> folder inside will contains our compiled Angular application.</p><p>It may seem like we are using the two package structure, but we are just separating the Electron part from the rest of the application. </p><h2 id="Changes-in-the-app-configuration"><a href="#Changes-in-the-app-configuration" class="headerlink" title="Changes in the app configuration"></a>Changes in the app configuration</h2><ul><li>Create a script in our Angular application <code>package.json</code>.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"electron:start": "ng build --watch -op=electron/app"</span><br></pre></td></tr></table></figure><p>This will build the Angular app inside an app folder inside our Electron folder app, and will rebuild on every change.</p><ul><li>Add the new output folder into <code>.gitignore</code>, in <code>#compiled output</code> section, <code>/electron/app</code>.</li><li>Modify the <code>base</code> tag of the <code>index.html</code> of our Angular app, as follow:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"./"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>Adding a dot before the slash will allow Electron to find the served files, and without a <code>404</code> error will be threw.</p><p>This will be all the modifications that we need to integrate the application with Electron.</p><h2 id="Creating-our-Electron-app"><a href="#Creating-our-Electron-app" class="headerlink" title="Creating our Electron app"></a>Creating our Electron app</h2><ul><li>We need to create a <code>electron</code> folder inside our project. Inside we are going to run <code>npm init</code> command to create the Electron <code>package.json</code>. This folder will be our Electron root folder.</li><li><p>We add Electron as a development dependency. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D electron</span><br></pre></td></tr></table></figure></li><li><p>We create the entry point for our Electron program.</p></li></ul><p><em>index.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don't, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  win.loadURL(</span><br><span class="line">    url.format(&#123;</span><br><span class="line">      pathname: path.join(__dirname, <span class="string">'app'</span>, <span class="string">'index.html'</span>),</span><br><span class="line">      protocol: <span class="string">'file:'</span>,</span><br><span class="line">      slashes: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  win.webContents.openDevTools();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Emitted when the window is closed.</span></span><br><span class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Dereference the window object, usually you would store windows</span></span><br><span class="line">    <span class="comment">// in an array if your app supports multi windows, this is the time</span></span><br><span class="line">    <span class="comment">// when you should delete the corresponding element.</span></span><br><span class="line">    win = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it is common for applications and their menu bar</span></span><br><span class="line">  <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it's common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app's specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure><h2 id="Running-the-app"><a href="#Running-the-app" class="headerlink" title="Running the app"></a>Running the app</h2><ul><li><p>Open a terminal and move to the Angular project, and run <code>npm run electron:start</code> to start the Angular application.</p></li><li><p>Open a second terminal and move to the <code>electron</code> folder inside the project, and run <code>electron .</code> to start the electron application.</p></li></ul><p>You should see a window with the Angular app running inside of it.  </p><h1 id="Moving-forward"><a href="#Moving-forward" class="headerlink" title="Moving forward"></a>Moving forward</h1><p>We now have a very simple Angular application running inside of the Electron renderer process. If we modify something of either, the Angular app, or the Electron app, we need to close the Electron window and run the <code>electron .</code> again. This could be optimize using plugins and build systems, but this is the out-the-box behavior of Electron. </p><p>You may notice that the entry file of the Electron application is written in vanilla Javascript. This is because Electron runs only vanilla Javascript, and in order to run other language such Typescript, you should use a plugin, such <code>ts-node</code>, or a build system.</p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><ul><li><a href="/integrating-an-angular-cli-application-with-electron-34mi">The seed</a></li><li><a href="/electron-with-typescript-using-ts-node-8oi">Electron with Typescript</a></li><li><a href="/integrating-an-angular-cli-application-with-electron---the-ipc-4m18">The IPC</a></li></ul>]]></content>
    
    <summary type="html">
    
      A step by step guide to integrate an Angular-CLI generated application with Electron framework.
    
    </summary>
    
    
      <category term="javascript" scheme="http://michaeljota.github.com/tags/javascript/"/>
    
      <category term="electron" scheme="http://michaeljota.github.com/tags/electron/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Finally! We Have a Finally (But We Already Had One)</title>
    <link href="http://michaeljota.github.com/finally-we-have-a-finally-but-we-already-had-one/"/>
    <id>http://michaeljota.github.com/finally-we-have-a-finally-but-we-already-had-one/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2018-02-01T23:11:42.456Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://78.media.tumblr.com/625dcb0918e78fdf75030507f8085039/tumblr_n05mepfYgB1tq4of6o1_500.gif" alt="Promise"></p><p>I like to dig around the new features that are coming to JS, even when most of the time we need to transpile them down, you should know that you can, and should, deploy to production <a href="https://philipwalton.com/articles/deploying-es2015-code-in-production-today" target="_blank" rel="noopener">using ES2015+ syntax today</a>. In the <a href="https://github.com/tc39/proposals/blob/master/README.md" target="_blank" rel="noopener">current list of proposals in stage-3</a>, was something that catch my attention. That was the <a href="https://github.com/tc39/proposal-promise-finally" target="_blank" rel="noopener">Promise.prototype.finally</a>.</p><h1 id="FINALLY"><a href="#FINALLY" class="headerlink" title="FINALLY!"></a>FINALLY!</h1><p>So we now have a finally method into Promise. A finally method will be called always, and doesn’t care if the Promise was fulfilled or rejected. It will no alter the value of the resolve promise, but could reject the promise with a new reason. Currently there are several implementations in other future libraries in NPM, as in the current proposal is written. However this, soon to be standard, will allow to use the method in evergreen browsers.</p><h1 id="When-to-use-it"><a href="#When-to-use-it" class="headerlink" title="When to use it"></a>When to use it</h1><p>The finally statement is really common in programming, specially when dealing with external connections that must be closed even in an unsuccessful operation, such as reading external files or database operations. Such connections need to be closed, and doesn’t matter if the operation was successful or not, we just need to close the connection.</p><h1 id="How-to-use-it"><a href="#How-to-use-it" class="headerlink" title="How to use it"></a>How to use it</h1><p>The finally method is really straightforward, every promise will have one, and it will return a promise as well, so you could chain as usual. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span></span><br><span class="line">    .resolve(<span class="number">3</span>)</span><br><span class="line">    .finally(</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'FINALLY!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    .then(</span><br><span class="line">        value =&gt; <span class="built_in">console</span>.log(value) <span class="comment">// Output: 3</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>As you may notice, resolving a value in the finally, have not effects. However, you should know that, per specification, a Promise can be rejected from a finally method.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span></span><br><span class="line">    .resolve(<span class="number">3</span>)</span><br><span class="line">    .finally(</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'FINALLY!'</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    .then(</span><br><span class="line">        value =&gt; <span class="built_in">console</span>.log(value) <span class="comment">// Does not print</span></span><br><span class="line">    ).catch(</span><br><span class="line">        error =&gt; <span class="built_in">console</span>.log(error) <span class="comment">// Output: 4</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure></p><h1 id="How-to-use-it-today"><a href="#How-to-use-it-today" class="headerlink" title="How to use it, today"></a>How to use it, today</h1><p>Well, you could use one of the different future libraries, such <a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="noopener">Bluebird</a>, or the finally shim and use it with ES2017, that have a new syntax to deal with promises, <code>async</code>/<code>await</code>. I really love them, and they are very handy to work with promises, writing code that looks very clean. This couple makes every function, an asynchronous function, that are resolved as a regular Promise. So, you could just do finally after the declaration of the async function.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseA = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">promiseA.finally(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'The promise either was a success or a failure'</span>));</span><br></pre></td></tr></table></figure></p><p>The finally method will be called, as per the specification. But, what if we need to <code>try</code>/<code>catch</code> inside the async function (That you should). Then, we could use the <code>finally</code> statement.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aSuperUsefulPromise = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> PromiseThatCouldThrow();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="comment">// We don't modify the promise here, just catch the error and handle it.</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> aSuperUsefulPromise()) <span class="comment">// Outputs: 4</span></span><br></pre></td></tr></table></figure></p><p><img src="https://media.giphy.com/media/CDJo4EgHwbaPS/giphy.gif" alt="Wait... What?"><br>Well, when dealing with <code>try</code>/<code>catch</code>/<code>finally</code> you CAN modify the value of a resolved promise. And this is really important to notice and understand, as you may expect a different result. So, you should never return inside a finally statement. It maybe weird to you, cause JS have a implicit return statement, but that return will be called after the finally statement, not before.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The <code>finally</code> method in Promises will be something, but we could accomplish more or less the same behavior using current <code>try</code>/<code>catch</code>/<code>finally</code> statements, we need to be careful though. </p><p>I learn a lot writing this article, and I hope that you could understand a little more about the new <code>finally</code> method. Thanks you for reading, and as usual, if I made a mistake, please, guide me in the comments below, I will deeply appreciate it. </p>]]></content>
    
    <summary type="html">
    
      An explanation about the finally method in Promises.
    
    </summary>
    
    
      <category term="javascript" scheme="http://michaeljota.github.com/tags/javascript/"/>
    
      <category term="es2018" scheme="http://michaeljota.github.com/tags/es2018/"/>
    
  </entry>
  
  <entry>
    <title>Pages: A Component Convention for Angular&#39;s Pages</title>
    <link href="http://michaeljota.github.com/pages-a-component-convention-for-angular-s-pages/"/>
    <id>http://michaeljota.github.com/pages-a-component-convention-for-angular-s-pages/</id>
    <published>2017-10-08T16:00:00.000Z</published>
    <updated>2018-02-01T23:24:20.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Previously-on…"><a href="#Previously-on…" class="headerlink" title="Previously on…"></a>Previously on…</h1><ul><li><a href="/widgets-and-components-for-angular-2-and-up">Widgets introduction</a></li><li><a href="/input-set-pattern-for-widgets-in-angular">Input-set “pattern” in Widgets</a></li><li><a href="/readonly-inputs-for-primitives-properties-in-widgets-for-angular">Read-only primitives in Widgets</a></li></ul><h1 id="And-now…"><a href="#And-now…" class="headerlink" title="And now…"></a>And now…</h1><p>Ok, boys, girls, another people that thinks that you can decide wherever pasta is rice just cause it defines it self as such, right now I had published two of my ways to manages components. I currently separate my angular components into 3 categories, based on what their concern is, widgets, to manage the look of them, components, to manage the behavior of them, and as I will introduce to you today, pages, to manage well, pages. </p><h1 id="What-a-page-is"><a href="#What-a-page-is" class="headerlink" title="What a page is?"></a>What a <em>page</em> is?</h1><p>A page is this. What you are looking, what the user will look. Most of the time will be a component that will no be referenced by its <code>selector</code>, but by the router at a certain url. And that its the is first difference between a page component and a regular component.</p><ul><li>A page can contain another pages</li></ul><p>For sure. But, they all should be represented by a url state, nothing more, nothing else. They should never be reference by it’s <code>selector</code>, cause, then I won’t be much of a page, would it?</p><ul><li>A page should not have a <code>selector</code></li></ul><p>If the <code>@Component</code> decorator does not have a <code>selector</code> them is unlikely to reference a page by such. I think is just safer to not do so. </p><ul><li>A page should not have a behavior</li></ul><p>Much as our AppComponent, or wherever you call the entry component of your application, the logic there should be minimum. Most of the AppComponent delegates the behavior to their inner components, the router, and the services.</p><ul><li>A page must have components only</li></ul><p>Well, you have to show something after all. But, why components only? Well, it happens that if you put a widget there, them is more likely to put the logic of that widget inside your page, and it should not be there. </p><ul><li>A page should have end-to-end test</li></ul><p>This is what you user will interact, so I think is logic to put aside this your e2e for that page. If your components should have a unit test beside them, and your widgets should… I think they should have a unit test as well, then your pages should contain nothing more than e2e tests. After all you test all your components. Right? RIGHT? ‘Cause I don’t.</p><h1 id="A-page"><a href="#A-page" class="headerlink" title="A page"></a>A page</h1><p>What would be life without examples to copy-paste? Well, I’m sorry, this is just too useless to be copy-pasted. But still, I hope this idea keeps in you mind. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;my-add-todo&gt;&lt;/my-add-todo&gt;</span></span><br><span class="line"><span class="string">    &lt;my-visible-todo-list&gt;&lt;/my-visible-todo-list&gt;</span></span><br><span class="line"><span class="string">    &lt;my-filter-buttons-widget&gt;&lt;/my-filter-buttons-widget&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoPage &#123;&#125;</span><br></pre></td></tr></table></figure><p>In this example we can see how a todo page would be. When you navigate to <code>/todo</code> url you would know exactly what to expect, only the components you previously defined, with the behavior you put into them. </p><h1 id="Thanks-you"><a href="#Thanks-you" class="headerlink" title="Thanks you!"></a>Thanks you!</h1><p>As always, I hope you liked this post, and I’m very thankful that you read all of it. If you have comments about it, ideas or just want to say that this should not be like this, please, use the comment section below. I’m looking forward to read you too. </p>]]></content>
    
    <summary type="html">
    
      A component convention to manage pages
    
    </summary>
    
    
      <category term="typescript" scheme="http://michaeljota.github.com/tags/typescript/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
      <category term="components" scheme="http://michaeljota.github.com/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>Readonly Input for Primitive Properties in Angular&#39;s Widgets</title>
    <link href="http://michaeljota.github.com/readonly-input-for-primitive-properties-in-angular-s-widgets/"/>
    <id>http://michaeljota.github.com/readonly-input-for-primitive-properties-in-angular-s-widgets/</id>
    <published>2017-08-27T16:00:00.000Z</published>
    <updated>2018-02-01T23:24:39.508Z</updated>
    
    <content type="html"><![CDATA[<p>Hi! It’s me again. Today I’m releasing the first stable version of my Pomodoro application. I made it using Angular 4, and Electron. While I was developing it, I try to use TDD, use a ngrx/Store, and separate the components of <a href="/widgets-and-components-for-angular-2-and-up">the Widgets</a>, and use <a href="/input-set-pattern-for-widgets-in-angular">the @Input-set, and template-get</a> for manage data. </p><p>But I have to say it, I failed, I failed big time. First at all, I come to realize why TDD is a design pattern, if you don’t have defined what you want to do, you can’t test first. I try to use the Store, but at the end I managed all the state from one component. But I did use Widgets to display the content, where I could. Well, this is actually the first application I do by my self, so, don’t be mean. I’ve been working with AngularJS since 1.2, and with Angular since RC5, but I never had to design the functionality of the app, the business logic was a piece of the company I’d worked on. </p><p>However, where I failed the most was at using the @Input-set/template-get duo. I mean, I could use them, but I most manage primitives values, so why bother? Still, one advantage of this approach is that you could treat the values as inmutables, because you set it somewhere, and return it somewhere else, there is no place to side effects there. </p><p>So how to deal with primitives, without written unnecessary code lines, and still maintaining the immutability? Well, Typescript 2 brought a nice feature to deal with this <code>readonly modifier</code>. You can read more about that <a href="https://basarat.gitbooks.io/typescript/docs/types/readonly.html" target="_blank" rel="noopener">here</a>. It is different from a const, cause the assignment check it’s doing in compilation time, instead of runtime. Meaning, that even if you set your property to <code>readonly</code>, in runtime in can be written as many times as needed. But this approach allows us to be sure that the property will be only written by the inputed value, and we ain’t going to modify it.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> Cicle &#123;</span><br><span class="line">  <span class="comment">// Cicle values</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">// Component definitions</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> StartButtonWidget &#123;</span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">public</span> readonly cicle: Cicle;</span><br><span class="line">  <span class="meta">@Output</span>()</span><br><span class="line">  <span class="keyword">public</span> onClick: EventEmitter&lt;Cicle&gt; = <span class="keyword">new</span> EventEmitter&lt;Cicle&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> label(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// Returns a strings from the value of the cicle</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> emit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.onClick.emit(<span class="keyword">this</span>.cicle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, using a readonly property for our input primitives allow us to be sure about how and when it’s the property changing. But, I still think this have a disadvantage. If you need to input a value, and display another value, you could accidentally access the property in a wrong way. And I don’t mean you exactly, but the team you work in. With the <code>@input-set/template-get</code> the intentions you have when you write are clears, but with this, you have to be sure that the primitive is going to be use the way you expect. Documentation would be do it, I think.</p><p>This is just another way to deals with properties in Typescript and Angular framework, I’m sure that you have many ways more, and I would like to read about them in the comments bellow.</p><p>As always, thanks for reading, and I hope you’d liked. </p>]]></content>
    
    <summary type="html">
    
      Another way to handle the inputs in a widget in a right way.
    
    </summary>
    
    
      <category term="javascript" scheme="http://michaeljota.github.com/tags/javascript/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
      <category term="components" scheme="http://michaeljota.github.com/tags/components/"/>
    
      <category term="widgets" scheme="http://michaeljota.github.com/tags/widgets/"/>
    
  </entry>
  
  <entry>
    <title>@Input-Set Pattern for Angular&#39;s Widgets</title>
    <link href="http://michaeljota.github.com/input-set-pattern-for-angular-s-widgets/"/>
    <id>http://michaeljota.github.com/input-set-pattern-for-angular-s-widgets/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2018-02-01T23:39:28.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>If you read my last post, you should know what a Widget is, if you haven’t already, do it now, I’ll <em>await</em>. </p><p><code>await Reader.read(&#39;</code><a href="/widgets-and-components-for-angular/">Widgets and components</a><code>&#39;);</code></p><p>Now you know what Widgets should be. I tried to keep it simple for the first implementation, but I’m really turning my head around this. The thing is, React is a JavaScript pure framework and with JSX allow us to do things that we can’t made with plain HTML templates, nevertheless, Typescript allow us for things that JavaScript does not, at the very least, it seems to allow that. Like <em>private</em> properties. With that in mind, I’ll try to explain why you should use private properties inside a Widget and how to manage the data entry in a better way.</p><h2 id="The-situation"><a href="#The-situation" class="headerlink" title="The situation"></a>The situation</h2><p>Following the comparative with React from the last post, when the <code>props</code> are send to a <code>component</code>, most of the the time we are getting it following the destructive pattern, allowing to do things like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface IUser &#123;</span><br><span class="line">  firstname: string;</span><br><span class="line">  lastname: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function usersList(&#123;users = []&#125; : &#123; IUser[] &#125;) &#123;</span><br><span class="line">  return (&lt;ul&gt;</span><br><span class="line">    users.map(user =&gt; userDetails(user));</span><br><span class="line">  &lt;/ul&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function userDetails(&#123;firstname, lastname, age&#125;: IUser) &#123;</span><br><span class="line">    return (&lt;li&gt;&lt;span&gt;&#123;firstname&#125; &#123;lastname&#125;&lt;/span&gt;have &#123;age&#125; years old&lt;/li&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>I think this looks good, because it allow us to be explicit about what we want to show, and how to show it.</p><p>In Angular, we just <code>@Input</code> the data that we want to get from the outside.<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.ts</span></span><br><span class="line"><span class="keyword">interface</span> IUser &#123;</span><br><span class="line">  firstname: <span class="built_in">string</span>;</span><br><span class="line">  lastname: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user-list.widget.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-user-list'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li *ngFor="let user of users"&gt;</span></span><br><span class="line"><span class="string">      &lt;my-user-details [user]=user&gt;&lt;my-user-details&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserListWidget &#123;</span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">public</span> users: IUser[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user-details.widget.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-user-details'</span>,</span><br><span class="line">  template: </span><br><span class="line">    <span class="string">`&lt;span&gt;&#123;&#123;user.firstname&#125;&#125; &#123;&#123;user.lastname&#125;&#125;&lt;/span&gt; has &#123;&#123;user.age&#125;&#125; years old`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserDetailsWidget &#123;</span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">public</span> user: IUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is right, as Widgets are suppose to display data, and they should <em>only</em> concern should be how to display that data. But we need a better way to organize how we show that data correctly in the template.</p><p>I like the approach from React in that sense. Don’t get me wrong, I love Angular. But JSX allow us to do something nicer than dotter properties, destructive assignment.</p><h2 id="Solution-proposal"><a href="#Solution-proposal" class="headerlink" title="Solution proposal"></a>Solution proposal</h2><p>Now that is being clearer that React have a somewhat advantage above us, we as Angular developers need to propose a solution to be even, using features that are being bringed by Typescript, <em>private</em> properties. I know that Typescript is compiled to JavaScript, and JavaScript doesn’t have such things, but, we’ll do as we don’t care.<br>Also, we will use a ES6 <code>set</code> feature. This allow us to have properties that can be set, but cannot be read.</p><h3 id="Introducing-input-set"><a href="#Introducing-input-set" class="headerlink" title="Introducing @input set"></a>Introducing <code>@input set</code></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-user-details'</span>,</span><br><span class="line">  template: </span><br><span class="line">    <span class="string">`&lt;span&gt;&#123;&#123;firstname&#125;&#125; &#123;&#123;lastname&#125;&#125;&lt;/span&gt; has &#123;&#123;age&#125;&#125; years old`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserDetailsWidget &#123;</span><br><span class="line">  <span class="keyword">private</span> _user: IUser;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">set</span> user(value: User): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._user = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK. We learn we can set to private properties, but that does not quite allow us to show the properties in the template. Technically JavaScript only have properties, so we could bind to the private property, but we should <em>never</em> bind a private property to the template, as the AOT compiler would throw.</p><h3 id="Introducing-template-get"><a href="#Introducing-template-get" class="headerlink" title="Introducing template get"></a>Introducing <code>template get</code></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-user-details'</span>,</span><br><span class="line">  template: </span><br><span class="line">  <span class="string">`&lt;span&gt;&#123;&#123;firstname&#125;&#125; &#123;&#123;lastname&#125;&#125;&lt;/span&gt; has &#123;&#123;age&#125;&#125; years old`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserDetailsWidget &#123;</span><br><span class="line">  <span class="keyword">private</span> _user: IUser;</span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">set</span> user(value: IUser) &#123;</span><br><span class="line">    <span class="keyword">this</span>._user = value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> firstname(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._user.firstname;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> lastname(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._user.lastname;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> age(): age &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._user.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This actually works as expected. Allowing a better control over the data that are being displayed in the template, and how to expose it. Also, it would even allow us to do certain things, to maintain the code in a better way.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-user-details'</span>,</span><br><span class="line">  template: </span><br><span class="line">  <span class="string">`&lt;span&gt;&#123;&#123;fullname&#125;&#125;&lt;/span&gt; has &#123;&#123;age&#125;&#125; years old`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserDetailsWidget &#123;</span><br><span class="line">  <span class="keyword">private</span> _user: IUser;</span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">set</span> user(value: IUser) &#123;</span><br><span class="line">    <span class="keyword">this</span>._user = value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> fullname(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this._user.firstname&#125;</span> <span class="subst">$&#123;this._user.lastname&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> age(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._user.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, <code>template get</code> as showed here have certain issues, but I’ll explain everything about those issues properly in other post.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>For this, I made a little Plunker that expose the use case. <a href="http://plnkr.co/edit/qQMk8kCH0wWp3yznE6MX?p=preview" target="_blank" rel="noopener">Here</a></p><h2 id="Thanks-you"><a href="#Thanks-you" class="headerlink" title="Thanks you"></a>Thanks you</h2><p>As always, thank you for reading this long. I hope you like it, and I am really looking forward to read your thoughts in the comments section. </p>]]></content>
    
    <summary type="html">
    
      Pattern proposal for data management in Angular&#39;s Widgets
    
    </summary>
    
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
      <category term="components" scheme="http://michaeljota.github.com/tags/components/"/>
    
      <category term="widgets" scheme="http://michaeljota.github.com/tags/widgets/"/>
    
  </entry>
  
  <entry>
    <title>Widgets and Components for Angular 2 and Up</title>
    <link href="http://michaeljota.github.com/widgets-and-components-for-angular/"/>
    <id>http://michaeljota.github.com/widgets-and-components-for-angular/</id>
    <published>2017-03-10T04:00:00.000Z</published>
    <updated>2018-02-01T23:11:16.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>If you are coming from React, the React community as develop some patterns that made easy and simple to develop apps with this framework. One of this patterns is the <em>smart</em> and <em>dumb</em> component, or <em>container</em> and <em>component</em>. This keeps a separation between how a component should display the data, and how a component actually manage the data. If you want more about this, there are plenty of articles about it, this is not what I’m writing about.</p><h2 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h2><p>The actual name for a piece of web page according to the standard it’s “web component”, so one might think that calling <em>component</em> to the piece of code that shows the data it’s the most accurate way to name them. But…</p><p><img src="https://i.imgflip.com/1l5mqr.jpg" alt="I reject nature"></p><p>Angular community had develop their own way of thinking about what a component is, and in the Angular community I had see so many times that a <em>component</em> have a <em>behavior</em>. </p><blockquote><p>What?! This is just insane. A component should concern only about how to display the data, no how to manage it.</p></blockquote><p>Well, it is true. The only fact that Angular components are called <em>Components</em> it’s one of the examples to show my point of view. Still, we need some way to manage the display of the data. </p><h2 id="Solution-proposal"><a href="#Solution-proposal" class="headerlink" title="Solution proposal"></a>Solution proposal</h2><p>I know this would be only another solution proposal, and mine doesn’t actually adds anything to current implementation, it’s just syntactic sugar for the same thing.</p><h3 id="Introducing-Widgets"><a href="#Introducing-Widgets" class="headerlink" title="Introducing Widgets"></a>Introducing Widgets</h3><p>So… Widgets? What <em>should</em> they be? I propose <em>Widgets</em> to name anything that only should concern about how to display something. And this it’s something that Angular it’s great at, separation. I’m not saying that React it’s bad about it, but I think that the Angular team had a better approach to this issue.</p><p>Ideally a Widget should have only <code>@input</code>s and <code>@output</code>s. That’s all. A Widget had to be made to show info, and it have to be a component that reflects that in their code. There should be no logic inside a Widget, but the logic that a Widget need to show the data that is being inputed. </p><p>I also think about the way that the data should be managed inside the Widget, but that would be for another day (Or you can read this <a href="https://github.com/mgechev/codelyzer/issues/222" target="_blank" rel="noopener">issue</a>)</p><h3 id="What-widgets-should-be"><a href="#What-widgets-should-be" class="headerlink" title="What widgets should be"></a>What widgets should be</h3><ul><li>Widgets should be the presentation components of and Angular application.</li><li>Widgets should be logicless.</li><li>Widgets should be concern about the style of their own data.</li></ul><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><h5 id="Widgets-are-just-components"><a href="#Widgets-are-just-components" class="headerlink" title="Widgets are just components?"></a>Widgets are just <em>components</em>?</h5><p>Yes. :). No more, not less. Just <em>components</em>. They have to show information, but they should not care about how the information it’s being provide for them. </p><h5 id="Why-another-name-then"><a href="#Why-another-name-then" class="headerlink" title="Why another name then?"></a>Why another name then?</h5><p>As I said, <em>component</em> in Angular community had been used for development of piece of web pages that <em>manage</em> information. </p><h5 id="Why-called-them-widgets"><a href="#Why-called-them-widgets" class="headerlink" title="Why called them widgets?"></a>Why called them <em>widgets</em>?</h5><p>Cause, after all, <em>widgets</em> actually are made to show information, so it’s seems logical to call them that way.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>There should not be one motivation for use a name proposal without an example, and that’s what I’m going to give you. </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ITodoItem &#125; <span class="keyword">from</span> <span class="string">'./../../models'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-todo-list-widget'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;my-todo *ngFor="let todo of todoList;trackBy:todo?.id"</span></span><br><span class="line"><span class="string">      [todo]="todo"</span></span><br><span class="line"><span class="string">    &gt;&lt;/my-todo&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListWidget &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="keyword">public</span> todoList: ITodoItem[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is a simple case of use. I’ll try to explain the code.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ITodoItem &#125; <span class="keyword">from</span> <span class="string">'./../../models'</span>;</span><br></pre></td></tr></table></figure><p>First of all, imports. From <code>@angular/core</code> we import <code>input</code> and <code>component</code> decorators. Remember, everything in Angular it’s a decorator, so are Widgets, that name it’s just sugar. There is not a <code>Widget</code> decorator, and I don’t think that it should be one. From a model folder, the import of the <code>Item</code> model. </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'my-todo-list-widget'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;my-todo *ngFor="let todo of todoList;trackBy:todo?.id"</span></span><br><span class="line"><span class="string">      [todo]="todo"</span></span><br><span class="line"><span class="string">    &gt;&lt;/my-todo&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>So we decorate. I use the suffix <code>widget</code> for the selector, cause I had a component with the same name. So if you can name things better than I do, you should not need that. Also, the template, the less, the better. I think that if your template it’s less than 10 lines, you should inline it. But, it’s up to you. What is important it’s to define all the display behavior here.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListWidget &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="keyword">public</span> todoList: ITodoItem[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, we declare the class. This is the important part. As you can see, there is not logic here. It’s just a class requesting an <code>input</code> property and nothing else. </p><h4 id="More-examples"><a href="#More-examples" class="headerlink" title="More examples"></a>More examples</h4><p>If you want a couple of more examples about Widgets, checkout my repo <a href="https://github.com/michaeljota/angular2-ultimate-starter" target="_blank" rel="noopener">angular2-ultimate-starter</a>. This is based of <code>AngularClass</code> starter, but I added <code>ngrx/store</code> implementation, and a couple patters borrow from React, as <code>Widgets</code>.</p><h2 id="Thanks-you"><a href="#Thanks-you" class="headerlink" title="Thanks you"></a>Thanks you</h2><p>This is all for now. This is my first post, like ever, about Angular. I hope you enjoy this, and for anything you have to say about this, I’m looking forward to read your comments. Cheers and happy coding!</p>]]></content>
    
    <summary type="html">
    
      A review about React components and containers, but for Angular 2.
    
    </summary>
    
    
      <category term="webcomponents" scheme="http://michaeljota.github.com/tags/webcomponents/"/>
    
      <category term="angular" scheme="http://michaeljota.github.com/tags/angular/"/>
    
      <category term="components" scheme="http://michaeljota.github.com/tags/components/"/>
    
      <category term="widgets" scheme="http://michaeljota.github.com/tags/widgets/"/>
    
  </entry>
  
</feed>
